#!/bin/sh

set -e # エラーが発生した際に実行を停止する
test "$YAPC_DEBUG" && set -x # -x: 呼び出す関数名と引数を表示

 # 当該スクリプトは2度実行される。
 # 1回目:名前空間を分ける前(PIDが1ではない)
 # 2回目:名前空間を分けた後(PIDが1)

: ${YAPC_CAPS:="cap_chown,cap_dac_override,cap_fsetid,cap_fowner,cap_mknod,cap_setgid,cap_setuid,cap_setfcap,cap_setpcap,cap_net_bind_service,cap_sys_chroot,cap_kill,cap_audit_write"}
: ${YAPC_ROOT:="/"}
: ${YAPC_NET:=}
: ${YAPC_NAME=}
: ${YAPC_UID:=`id -u`}
: ${YAPC_GID:=`id -g`}

SUBSYS="cpu,memory,pids" # サブシステム

# 1回目実行された時はPIDが1ではないのでここの条件分岐は真となる。
# 2回目はPIDが1なので(名前空間を分けたので)この条件分岐は義となる。
if [ $$ -ne 1 ]; then
  TRAP_CMD=

  # CGROUPの設定
  export YAPC_CGROUP=
  YAPC_CGROUP="$(basename $0)-$$" # ファイル名とプロセスIDを連結
  cgcreate -g $SUBSYS:$YAPC_CGROUP # cgroupの作成
  TRAP_CMD="cgdelete -g $SUBSYS:$YAPC_CGROUP;$TRAP_CMD" # EXITシグナルのトラップ時にcgroupを削除する
  trap "$TRAP_CMD" EXIT # EXITシグナルトラップ時の処理を設定

  # 作業ディレクトリ
  export YAPC_WORKDIR=
  YAPC_WORKDIR=$(mktemp -d /tmp/"$(basename $0)".$$.XXXXXXXX) # ファイル名、プロセスID及びランダム文字列を連結
  TRAP_CMD="rm -rf $YAPC_WORKDIR;$TRAP_CMD" # EXITトラップ時に作業ディレクトリを削除
  trap "$TRAP_CMD" EXIT # 再度トラップ時の処理を設定

  # ネットワーク周り
  export YAPC_IP_NETNS=
  if [ "$YAPC_NET" ];then ネットワーク用変数が定義されている場合
    NETNS="yapc$$" # "yapc"とプロセスIDを連結
    ip netns add $NETNS # 新たにネットワーク名前空間を追加
    TRAP_CMD="ip netns del $NETNS;$TRAP_CMD" # トラップ時に当該ネットワーク名前空間を削除
    trap "$TRAP_CMD" EXIT # 再度トラップ時の処理を設定
    ip link add name veth$NETNS type veth peer name eth0 # vethのペアを作成
    ip link set eth0 netns $NETNS # eth0をネットワーク名前空間にバインド
    YAPC_IP_NETNS="ip netns exec $NETNS" # 作成した名前空間でコマンドを実行するためのテンプレを作成
  fi

  # ここで2回目の実行で認識される変数を作成
  export YAPC_INIT=
  YAPC_INIT=1

  trap '' INT # INTシグナルトラップ時の処理を設定(何もしない)
  trap "$TRAP_CMD" EXIT # EXITシグナトラップ時の処理を設定

  # INTシグナルの処理をデフォルトに戻し、名前空間を分け再度当スクリプトを実行する。
  (trap - INT; unshare --mount --uts --ipc --pid --fork $0 "$@")

  exit 0
fi

# 二度目の実行で条件分岐が真となる。
if [ "$YAPC_INIT" ]; then
  mount --make-rprivate / # ルートディレクトリをプライベートマウント

  for i in root upper work; do
    mkdir $YAPC_WORKDIR/$i # root, upper, workの3つのディレクトリを作成
  done

  # "/" を読み取り専用であるlowerdirに、upperdirを先ほど作成した"upper"に、workdirを先ほど作成した"workdir"に、そしてマウントポイントをコンテナのルートディレクトリに設定
  mount -t overlay -o lowerdir=$YAPC_ROOT,upperdir=$YAPC_WORKDIR/upper,workdir=$YAPC_WORKDIR/work overlayfs $YAPC_WORKDIR/root
  YAPC_ROOT=$YAPC_WORKDIR/root # ルートディレクトリを設定

  test "$YAPC_NAME" && hostname $YAPC_NAME # ホスト名を設定

  mount -t tmpfs tmpfs $YAPC_ROOT/dev # /devを作成
  mkdir $YAPC_ROOT/dev/pts # 制御端末用のディレクトリを作成
  mount -t devpts -o newinstance,ptmxmode=0666,mode=620,gid=5 devpts $YAPC_ROOT/dev/pts # ptsを作成
  ln -s /dev/pts/ptmx $YAPC_ROOT/dev/ptmx # 端末のマスタをマウント
  # その他必要なデバイスファイルを作成及びバインド
  mkdir $YAPC_ROOT/dev/mqueue && mount -t mqueue -o nosuid,noexec,nodev mqueue $YAPC_ROOT/dev/mqueue
  mkdir $YAPC_ROOT/dev/shm && mount -t tmpfs -o mode=1777,size=65536k tmpfs $YAPC_ROOT/dev/shm
  touch $YAPC_ROOT/dev/console &&  mount --bind /dev/console $YAPC_ROOT/dev/console
  touch $YAPC_ROOT/dev/null &&  mount --bind /dev/null $YAPC_ROOT/dev/null
  touch $YAPC_ROOT/dev/zero &&  mount --bind /dev/zero $YAPC_ROOT/dev/zero
  touch $YAPC_ROOT/dev/random &&  mount --bind /dev/random $YAPC_ROOT/dev/random
  touch $YAPC_ROOT/dev/urandom &&  mount --bind /dev/urandom $YAPC_ROOT/dev/urandom
  # procファイル周りをバインド
  mount -t proc -o rw,nosuid,nodev,noexec,relatime proc $YAPC_ROOT/proc
  mount --bind -o ro /proc/sys $YAPC_ROOT/proc/sys
  mount --bind -o ro /proc/sysrq-trigger $YAPC_ROOT/proc/sysrq-trigger
  mount --bind -o ro /proc/irq $YAPC_ROOT/proc/irq
  mount --bind -o ro /proc/bus $YAPC_ROOT/proc/bus
  # sysfsをバインド
  mount -t sysfs -o ro,nosuid,noexec,nodev sysfs $YAPC_ROOT/sys

  # /etc/のパスと共に、resolv.conf, hosts, hostnameをコピー
  for i in resolv.conf hosts hostname; do
    cp --parents /etc/$i $YAPC_WORKDIR/upper/
  done

  # Cgroupの設定
  test "$YAPC_CPU_QUOTA" && cgset -r cpu.cfs_quota_us=$YAPC_CPU_QUOTA $YAPC_CGROUP
  test "$YAPC_MEMORY_LIMIT" && cgset -r memory.limit_in_bytes=$YAPC_MEMORY_LIMIT $YAPC_CGROUP
  test "$YAPC_PIDS_MAX" && cgset -r pids.max=$YAPC_PIDS_MAX $YAPC_CGROUP
  cgclassify -g $SUBSYS:$YAPC_CGROUP $$

  # ネットワーク名前空間の指定がある場合には
  if [ "$YAPC_IP_NETNS" ];then
    export YAPC_ROOT
    export YAPC_INIT=
    exec $YAPC_IP_NETNS $0 "$@" # 先ほど作成した名前空間で指定のプログラムを実行する
  fi
fi

cd $YAPC_ROOT # ルートディレクトリに移動
mkdir .oldroot # 古いルートディレクトリを移動させるディレクトリ
pivot_root . .oldroot # ルートディレクトリの移動
cd / # 再度ルートディレクトリに移動
umount -l /.oldroot # レイジーアンマウント
rmdir /.oldroot # 古いルートディレクトリを削除

# YAPC_から始める環境変数をクリアし指定のコマンドを実行する
clean_exec() {
  for i in $(env | grep ^YAPC_ | cut -f1 -d=); do
    unset "$i"
  done
  exec "$@"
}
# 削除対象のCapabilityリストを作成？
DROP_CAPS=$(
  capsh \
  --inh="$YAPC_CAPS" \
  -- \
  -c 'capsh --decode=$(printf "%#x" $(((~0x$(cat /proc/self/status | grep ^CapInh | cut -f2)) & 0x3FFFFFFFFF))) | cut -d= -f2'
)

# 指定した権限を落として実行する。
clean_exec capsh \
  --inh="${YAPC_CAPS}+ep" \
  --drop="$DROP_CAPS" \
  --gid="$YAPC_GID" \
  --uid="$YAPC_UID" \
  -- \
  -c "$*"
